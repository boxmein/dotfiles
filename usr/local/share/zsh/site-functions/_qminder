#compdef qminder
local curcontext="$curcontext" state line ret=1
local -a _command_keywod
_command_keyword=(
  'configure:Configure Qminder CLI to run the services you need'
  'run:Build and run configured services'
  'redeploy:Stop, rebuild and start a service again. Multiple services can be redeployed at the same time.'
  'update-database:Updates the database to the latest backup'
  'code-coverage:Runs code coverage for service'
  'monitor:Run Qminder Monitor'
  'halt:Stops everything'
  'nuke:Stops and removes Docker containers and images'
  'clean-images:Removes unused Docker images'
  'completions:Outputs the Qminder CLI completions script'
  'install:Links Qminder CLI to /usr/local/bin/qminder'
  'remote:Interact with Qminder Remote'
)
_qminder_commands () {
  _describe 'qminder' _command_keyword
}

_remote_keyword=(
  'init:Start a remote development server'
  'run:Start Qminder Dashboard in remote'
  'stop:Stop the remote dev server'
  'nuke:Delete and terminate the AWS EC2 instance'
  'synchronize:Copy Qminder server source code to remote dev server'
  'synchronize-ui-components:Qminder UI components remote dev mode'
  'watch:Synchronize source code on every file change'
  'watch-frontend:Start webpack watcher for dashboard-frontend'
  'watch-frontend-setup:Start webpack watcher for dashboard-frontend setup app'
  'watch-frontend-cc:Start angular watcher for Control Center frontend'
  'warehouse-etl:Start Warehouse ETL'
  'ssh:Open remote SSH connection'
  'htop:Run htop on the remote machine (system monitor)'
  'help:Show help for remote commands'
  'letmein:Add your current IP to the firewall whitelist'
)

_remote_commands() {
  _describe 'qminder remote' _remote_keyword
}

_arguments -C \
  '1: :_qminder_commands' \
  '*:: :->command_args'

case $state in
  command_args)
      case $words[1] in
        redeploy)
          _arguments \
            '*: :(notifications graphql api api-key-vault api-gateway dashboard cc webhooks service-history auditor search sign-in-wrapper janitor)'
          ;;
        remote)
          _arguments \
            '1: :_remote_commands'
          ;;
        *)
          _default
          ;;
      esac
    ;;
esac
return 0
